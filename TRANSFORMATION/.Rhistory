#mtry for random forest
rf_model <- train(diabetes ~.,
data = train_df ,
method = "rf",
tuneGrid = myGrid,
trControl = trainControl(method = "cv", number =5 ))
myGrid <- data.frame(cp = seq(0.001, 0.3, by = 0.005, mtry = 3))
#mtry for random forest
rf_model <- train(diabetes ~.,
data = train_df ,
method = "rf",
tuneGrid = myGrid,
trControl = trainControl(method = "cv", number =5 ))
#mtry for random forest
rf_model <- train(diabetes ~.,
data = train_df ,
method = "rf",
tuneGrid = mtry,
trControl = trainControl(method = "cv", number =5 ))
myGrid <- data.frame(mtry = 2:7)
#mtry for random forest
rf_model <- train(diabetes ~.,
data = train_df ,
method = "rf",
tuneGrid = myGrid,
trControl = trainControl(method = "cv", number =5 ))
#mtry for random forest
rf_model <- train(diabetes ~.,
data = train_df ,
method = "rf",
tuneGrid = myGrid,
trControl = trainControl(method = "cv", number =5 ))
print(tree_model)
myGrid <- data.frame(mtry = 2:7)
#mtry for random forest
rf_model <- train(diabetes ~.,
data = train_df ,
method = "rf",
tuneGrid = myGrid,
trControl = trainControl(method = "cv", number =5 ))
#mtry for random forest
rf_model <- train(diabetes ~.,
data = train_df ,
method = "rf",
tuneGrid = myGrid,
trControl = trainControl(method = "cv", number =5 ))
print(tree_model)
print(tree_model)
print(tree_mode
Jedlueng
19 October 2022
Random Forest
Multiple different decision Tree
Majority Vote
#Data
```{r}
data("PimaIndiansDiabetes")
head(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
set.seed(42)
id <- createDataPartition( y = df$diabetes,
p = 0.8,
list = FALSE)
train_df <- df[id, ]
test_df <- df[-id, ]
train_df <- df[id, ]
test_df <- df[-id, ]
#Train Model
```{r}
set.seed(99)
myGrid <- data.frame(mtry = 2:7)
#mtry for random forest
rf_model <- train(diabetes ~.,
data = train_df ,
method = "rf",
tuneGrid = myGrid,
trControl = trainControl(method = "cv", number =5 ))
#mtry for random forest
rf_model <- train(diabetes ~.,
data = train_df ,
method = "rf",
tuneGrid = myGrid,
trControl = trainControl(method = "cv", number =5 ))
print(rf_model)
rf_model$finalModel
#mtry for random forest
rf_model <- train(diabetes ~.,
data = train_df ,
method = "rf",
tuneGrid = myGrid,
trControl = trainControl(method = "cv", number =5, verboseIter = TRUE))
print(rf_model)
#mtry for random forest
rf_model <- train(diabetes ~.,
data = train_df ,
method = "rf",
tuneGrid = myGrid,
trControl = trainControl(method = "cv", number =5, verboseIter = TRUE, classProbs = TRUE))
print(rf_model)
rf_model$finalModel
p <- predict(rf_model, newdata = test_df)
confusionMatrix(p, test_df$diabetes,
mode = "prec_recall", positive = "pos")
#mtry for random forest
rf_model <- train(diabetes ~.,
data = train_df ,
method = "rf",
tuneGrid = myGrid,
preProcess( = c("center", "scale", "nzv"))
#mtry for random forest
rf_model <- train(diabetes ~.,
data = train_df ,
method = "rf",
tuneGrid = myGrid,
preProcess( = c("center", "scale", "nzv")),
#mtry for random forest
rf_model <- train(diabetes ~.,
data = train_df ,
method = "rf",
tuneGrid = myGrid,
preProcess( = c("center", "scale", "nzv")),
#mtry for random forest
rf_model <- train(diabetes ~.,
data = train_df ,
method = "rf",
tuneGrid = myGrid,
trControl = trainControl(method = "cv", number =5, verboseIter = TRUE, classProbs = TRUE))
#mtry for random forest
rf_model <- train(diabetes ~.,
data = train_df ,
method = "rf",
tuneGrid = myGrid,
preProcess = c("center", "scale", "nzv"),
trControl = trainControl(method = "cv", number =5, verboseIter = TRUE, classProbs = TRUE))
)
regularized_model <- train(
diabetes ~.,
data = train_df,
method = "glmnet",
tuneGrid = myGrid,
trControl = trainControl(
method = "cv",
number =5,
verboseIter = TRUE
))
regularized_model <- train(
diabetes ~.,
data = train_df,
method = "glmnet",
tuneGrid = myGrid,
trControl = trainControl(
method = "cv",
number =5,
verboseIter = TRUE
))
mtcars %>%
group_by(am)
mtcars %>%
group_by(am) %>%
summarise(
avg_mpg = mean(mpg),
sum_mpg = sum(mpg),
min_mpg = min(mpg),
max_mpg = max(mpg),
var_mpg = var(mpg),
n = n()
)
mtcars %>%
summarise(
avg_mpg = mean(mpg),
sum_mpg = sum(mpg),
min_mpg = min(mpg),
max_mpg = max(mpg),
var_mpg = var(mpg),
n = n()
)
mtcars %>%
summarise(
avg_mpg = mean(mpg),
sum_mpg = sum(mpg),
min_mpg = min(mpg),
max_mpg = max(mpg),
var_mpg = var(mpg),
n = n()
)
mtcars %>%
summarise(
avg_mpg = mean(mpg),
sum_mpg = sum(mpg),
min_mpg = min(mpg),
max_mpg = max(mpg),
var_mpg = var(mpg),
n = n()
)
library(tidyverse)
library(tidyverse)
library(jsonlite)
library(RSQLite)
library(sqldf)
mtcars %>%
summarise(
avg_mpg = mean(mpg),
sum_mpg = sum(mpg),
min_mpg = min(mpg),
max_mpg = max(mpg),
var_mpg = var(mpg),
n = n()
)
mtcars %>%
group_by(am) %>%
summarise(
avg_mpg = mean(mpg),
sum_mpg = sum(mpg),
min_mpg = min(mpg),
max_mpg = max(mpg),
var_mpg = var(mpg),
n = n()
)
mtcars %>%
group_by(am, vs) %>%
summarise(
avg_mpg = mean(mpg),
sum_mpg = sum(mpg),
min_mpg = min(mpg),
max_mpg = max(mpg),
var_mpg = var(mpg),
n = n()
)
band_members
band_instruments
left_join(band_members,
band_instruments,
by = "name")
inner_join(band_members,
band_instruments,
by = "name")
left_join(band_members,
band_instruments,
by = "name")
right_join(band_members,
band_instruments,
by = "name")
full_join(band_members,
band_instruments,
by = "name")
band_members %>%
full_join(hand_instruments,
by = "name") %>%
filter(name %in% c("Join", "Paul")) %>%
mutate(hello = "OK")
band_members %>%
full_join(band_instruments,
by = "name") %>%
filter(name %in% c("Join", "Paul")) %>%
mutate(hello = "OK")
library(nycflights13)
install.packages(nycflights13)
install.packages(nycflights13)
library(nycflights13)
install.packages(nycflights13)
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
flights
view(flights)
view(flights)
flights %>%
count(origin)
flights %>%
filter(month == 9 )%>%
count(origin,destination)
flights %>%
count(origin,destination)
flights %>%
count(origin,destination)
flights %>%
count(origin)
flights %>%
filter(month == 9) %>%
count(origin,dest)
flights %>%
filter(origin == "JFK" & month %in% 3,4,5) %>% count (carrier)
flights %>%
filter(origin == "JFK" & month %in% c(3,4,5)) %>%
count(carrier) %>%
arrange(desc(n))
df <-flights %>%
filter(origin == "JFK" & month %in% c(3,4,5)) %>%
count(carrier) %>%
arrange(desc(n))
write_csv(df,"requested_data.csv")
students <- data.frame(
id = 1:5,
name = c("toy", "joe", "anna", "mary", "kevin"))
course_id = 1:3,
course_id = 1:3 ,
course <- data.frame(
course_id = 1:3 ,
course_name = c("Data", "R", "Python"
))
student %>%
left_join(course, by = "id")
student %>%
left_join(course, by = c("cid" = "course_id" ))
student %>%
left_join(course, by = c("cid" = "course_id" )) %>%  filter(course_name == "R")
students %>%
left_join(course, by = c("cid" = "course_id" )) %>%  filter(course_name == "R")
students %>%
left_join(course, by = c("id" = "course_id" )) %>%  filter(course_name == "R")
students <- data.frame(
id = 1:5,
name = c("toy", "joe", "anna", "mary", "kevin"),
cid = c(1,2,2,3,2))
course <- data.frame(
course_id = 1:3 ,
course_name = c("Data", "R", "Python"
))
students %>%
left_join(course, by = c("cid" = "course_id" )) %>%  filter(course_name == "R")
university <- data.frame(
uid = c("U01","U02"),
uname = c("University of London", "Chula University")
)
student %>%
left_join(course, by = c("cid"= "course_id"))
students %>%
left_join(course, by = c("cid"= "course_id"))
students %>%
left_join(course, by = c("cid"= "course_id")) %>%
left_join(university, by = "uid")
students %>%
left_join(course, by = c("cid"= "course_id")) %>%
left_join(university, by = "uid"))
students %>%
left_join(course, by = c("cid"= "course_id")) %>%
left_join(university, by = "uid"))
university <- data.frame(
uid = 1:2
uname = c("University of London", "Chula University")
university <- data.frame(
uid = 1:2,
uname = c("University of London", "Chula University")
)
students %>%
left_join(course, by = c("cid"= "course_id")) %>%
left_join(university, by = "uid"))
student %>%
left_join(course, by = c("cid" = "course_id")) %>% left_join(university, by = "uid")
students %>%
left_join(course, by = c("cid" = "course_id")) %>% left_join(university, by = "uid")
university <- data.frame(
uid = 1:2,
uname = c("University of London", "Chula University")
)
students %>%
left_join(course, by = c("cid" = "course_id")) %>% left_join(university, by = "uid")
university <- data.frame(
uid = 1:2,
uname = c("University of London", "Chula University")
)
university <- data.frame(
uid = 1:2,
uname = c("University of London", "Chula University")
)
students %>%
left_join(course,by = c("cid"= "course_id")) %>% left_join(university, by = "uid")
WorldPhones %>%
as.data.frame() %>%
rownames_to_column(var = "year")
WorldPhones %>%
as.data.frame() %>%
rownames_to_column(var = "year")%>%
pivot_longer()
WorldPhones %>%
as.data.frame() %>%
rownames_to_column(var = "year")%>%
pivot_longer(N.Amer:Mid.Amer,)
long_worldphones <- WorldPhones %>%
as.data.frame() %>%
rownames_to_column(var = "year")%>%
pivot_longer(N.Amer:Mid.Amer,
names_to = "Region",
values_to = "Sales")
print(long_worldphones)
long_worldphones %>%
group_by(Region) %>%
summarise(total_sales = sum(Sales))
long_worldphones %>%
pivot_wider(names_from = "Region",
values_from = "Sales")
write_csv(wide_data, "data.csv")
```{r}
wide_data <- long_worldphones %>%
pivot_wider(names_from = "Region",
values_from = "Sales")
write_csv(wide_data, "data.csv")
setwd("~/Documents/GitHub/datarockie-learning-/TRANSFORMATION")
library(RSQLite)
library(RPostgreSQL)
#Connnect sql server
con <- dbConnect()
#Connnect sql server
con <- dbConnect(SQLite(),"chinook.db")
#Show table
dbListTables(con)
#Select
dbGetQuery(con, "select firstname, lastname from customers")
#Select
dbGetQuery(con, "select firstname, lastname, country from customers")
#Select
dbGetQuery(con, "SELECT
firstname,
lastname,
country
FROM customers
WHERE country IN ('France', 'Austria', 'Belgium'")
#Select
dbGetQuery(con, "SELECT
firstname,
lastname,
country
FROM customers
WHERE country IN ('France', 'Austria', 'Belgium')")
JOIN albums ON artists.artistid = alblums.artistid
JOIN albums ON artists.artistid = alblums.artistid"""
JOIN albums ON artists.artistid = alblums.artistid"""
JOIN albums ON artists.artistid = alblums.artistid"""
JOIN tracks ON tracks.albumid = albums.albumid"
JOIN albums ON artists.artistid = albums.artistid
N tracks ON tracks.albumid = albums.albumid"
SELECT * FROM artists "
SELECT * FROM artists "
"SELECT * FROM artists "
query01 <- dbGetQuery(con, "SELECT
firstname,
lastname,
country
FROM customers
WHERE country IN ('France', 'Austria', 'Belgium')")
query01 <- dbGetQuery(con, "SELECT * FROM artists
JOIN albums ON artists.artistid = albums.artistid
JOIN tracks ON tracks.albumid = albums.albumid")
tracks <- dbGetQuery(con, query01)
print(query01)
tracks <- query01
tracks %>%
select 1:5 %>%
tracks %>%
select 1:5 %>%
tracks %>%
select(1:5) %>%
head()
tracks %>%
select(Composer, Milliseconds, Bytes, Unitprice) %>%
head()
dbDisconnect(con)
con
tracks %>%
sample_n(10) %>%
view()
tracks %>%
sample_n(10) %>%
view()
install.packages("janitor")
library(janitor)
clean_names(tracks)
tracks_clean %>%
select(1:4) %>%
sample_n(10) %>%
view()
tracks_clean <- clean_names(tracks)
tracks_clean %>%
select(1:4) %>%
sample_n(10) %>%
view()
set.seed(1)
tracks_clean %>%
select(1:4) %>%
sample_n(10) %>%
head(10)
con <- dbConnect(PostgreSQL(),
username = "vglzuihk",
password = "NzUibmbVlvrrUxJ_qyAPAKimsWOvVolZ",
server = "tiny.db.elephantsql.com ",
port = "5432",
dbname = "vglzuihk")
con <- dbConnect(PostgreSQL(),
username = "vglzuihk",
password = "NzUibmbVlvrrUxJ_qyAPAKimsWOvVolZ",
host = "tiny.db.elephantsql.com ",
port = "5432",
dbname = "vglzuihk")
con <- dbConnect(PostgreSQL(),
user = "vglzuihk",
password = "NzUibmbVlvrrUxJ_qyAPAKimsWOvVolZ",
host = "tiny.db.elephantsql.com ",
port = "5432",
dbname = "vglzuihk")
source("~/Documents/GitHub/datarockie-learning-/TRANSFORMATION/Post-gree.R", echo=TRUE)
con <- dbConnect(PostgreSQL(),
user = "vglzuihk",
password = "NzUibmbVlvrrUxJ_qyAPAKimsWOvVolZ",
host = "tiny.db.elephantsql.com ",
port = 5432,
dbname = "vglzuihk")
con <- dbConnect(PostgreSQL(),
user = "vglzuihk",
password = "NzUibmbVlvrrUxJ_qyAPAKimsWOvVolZ",
host = "tiny.db.elephantsql.com ",
port = 5432,
dbname = "vglzuihk")
